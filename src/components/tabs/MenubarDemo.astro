<div class="page">
	<header role="banner">
		<div class="title">Your Awesome WebSite</div>
		<div class="tagline">Using the Menubar element for your site navigation</div>
	</header>
	<nav aria-label="Your Awesome WebSite">
		<ul class="o-menubar-navigation" role="menubar" aria-label="Your Awesome WebSite">
			<li role="none">
				<a role="menuitem" href="#home"> Home</a>
			</li>
			<li role="none">
				<a class="o-menubar-navigation__top-link--expandable" role="menuitem" aria-haspopup="true" aria-expanded="false" href="#about"> About</a>
				<ul role="menu" aria-label="About">
					<li role="none">
						<a role="menuitem" href="#overview">Overview</a>
					</li>
					<li role="none">
						<a role="menuitem" href="#team">Our Team</a>
					</li>
					<li role="none">
						<a class="o-menubar-navigation__link--expandable" role="menuitem" aria-haspopup="true" aria-expanded="false" href="#facts"> Facts</a>
						<ul role="menu" aria-label="Facts">
							<li role="none">
								<a role="menuitem" href="#history">History</a>
							</li>
							<li role="none">
								<a role="menuitem" href="#awards">Awards</a>
							</li>
						</ul>
					</li>
				</ul>
			</li>
			<li role="none">
				<a class="o-menubar-navigation__top-link--expandable" role="menuitem" aria-haspopup="true" aria-expanded="false" href="#services"> Services</a>
				<ul role="menu" aria-label="Services">
					<li role="none">
						<a role="menuitem" href="#marketing">Marketing</a>
					</li>
					<li role="none">
						<a class="o-menubar-navigation__link--expandable" role="menuitem" aria-haspopup="true" aria-expanded="false" href="#e-commerce"> E-Commerce</a>
						<ul role="menu" aria-label="E-Commerce">
							<li role="none">
								<a role="menuitem" href="#shop">Shop</a>
							</li>
							<li role="none">
								<a role="menuitem" href="#marketplace">Marketplace</a>
							</li>
						</ul>
					</li>
					<li role="none">
						<a role="menuitem" href="#sign-up">Sign Up</a>
					</li>
					<li role="separator"></li>
					<li role="none">
						<a role="menuitem" href="#visit">Visit</a>
					</li>
					<li role="none">
						<a role="menuitem" href="#connect">Connect</a>
					</li>
				</ul>
			</li>
			<li role="none">
				<a class="o-menubar-navigation__top-link--expandable" role="menuitem" aria-haspopup="true" aria-expanded="false" href="#contact"> Contact</a>
				<ul role="menu" id="sub-menu-academics" aria-label="Contact">
					<li role="none">
						<a role="menuitem" href="#email">Email</a>
					</li>
					<li role="none">
						<a role="menuitem" href="#phone">Phone</a>
					</li>
					<li role="none">
						<a role="menuitem" href="#other">Other</a>
					</li>
				</ul>
			</li>
		</ul>
	</nav>

	<div class="main">
		<section aria-labelledby="id-page-title">
			<h1 id="id-page-title" class="page_title">Your Awesome WebSite</h1>
			<div class="content">
				<p></p>
			</div>
		</section>
	</div>

	<footer role="contentinfo">Your Awesome WebSite footer information</footer>
</div>

<style>
	@charset "utf-8";

    .page {
        box-shadow: var(--o-shadow-3);
    }

	.page header {
		border: var(--o-surface-2-brand) solid var(--o-border-size-2);
		background: var(--o-surface-4-brand);
		color: var(--o-bw);
		text-align: center;
	}

	.page header .title {
		font-size: 2.5em;
		font-weight: var(--o-font-weight-7);
		font-family: inherit;
	}

	.page .main {
		padding: 1em 5% 5em;
		border-left: var(--o-surface-2-brand) solid var(--o-border-size-2);
		border-right: var(--o-surface-2-brand) solid var(--o-border-size-2);
        background-color: var(--o-surface-1);
	}

	.page footer {
		border: var(--o-surface-2-brand) solid var(--o-border-size-2);
		background: var(--o-surface-4-brand);
		font-family: inherit;
		color: color: var(--o-bw);
		padding-left: 1em;
	}

	.page nav {
		margin: 0;
		padding: 0;
		border: var(--o-surface-2-brand) solid var(--o-border-size-2);
        background: var(--o-text-2-brand);
	}

	.o-menubar-navigation {
		/* Scoped Props */
		--o_menubar-bc: var(--o_menubar-border-color, hsl(var(--o-brand-hsl) / 75%));
		--o_menubar-popup-bc: var(--o_menubar-submenu-border-color, var(--o_menubar-bc));
		--o_menubar-top-bc: var(--o_menubar-topitem-border-color, hsl(var(--o-brand-hsl) / 75%));
		--o_menubar-sub-bc: var(--o_menubar-subitem-border-color, hsl(var(--o-brand-hsl) / 75%));
		--o_main-link-color: var(--o_menubar-topitem-color, var(--o-brand));
		--o_main-link-color-hover: var(--o_menubar-topitem-color-hover, var(--o-brand-hover));
		--o_sub-link-color: var(--o_menubar-subitem-color, var(--o_main-link-color));
		--o_sub-link-color-hover: var(--o_menubar-subitem-color-hover, var(--o_main-link-color-hover));

		--o_caret-top: var(--o_menubar-top-caret-thickness, var(--o-border-size-2));
		--o_caret-sub: var(--o_menubar-sub-caret-thickness, var(--o_caret-top));

		--o_menubar-bti: var(--o_menubar-initial-border-thickness, 0px);
		--o_menubar-bt: var(--o_menubar-border-thickness, var(--o-border-size-2));
		--o_menubar-pi: var(--o_menubar-padding-inline, var(--o_menubar-bt));
		--o_menubar-pb: var(--o_menubar-padding-block, var(--o_menubar-bt));
		--o_menubar-mi: var(--o_menubar-margin-inline, 0);
		--o_menubar-mb: var(--o_menubar-margin-block, 0);

		--o_menubar-popup-bg: var(--o_menubar-submenu-bg, var(--o-text-2-brand));
		--o_menubar-popup-br: var(--o_menubar-submenu-border-radius, 0);
		--o_menubar-popup-pi: var(--o_menubar-submenu-padding-inline, var(--o-size-2));
		--o_menubar-popup-pb: var(--o_menubar-submenu-padding-block, var(--o-size-2));
		--o_menubar-popup-bt: var(--o_menubar-submenu-border-thickness, var(--o-border-size-2));

		--o_menubar-top-bti: var(--o_menubar-topitem-initial-border-thickness, 0px);
		--o_menubar-top-bt: var(--o_menubar-topitem-border-thickness, var(--o-border-size-2));
		--o_menubar-top-br: var(--o_menubar-topitem-border-radius, 0);
		--o_menubar-top-pi: var(--o_menubar-topitem-padding-inline, var(--o-size-2));
		--o_menubar-top-pb: var(--o_menubar-topitem-padding-block, var(--o-size-2));
		--o_menubar-top-pbt-offset: 0px;
		--o_menubar-top-pbt: calc(var(--o_menubar-top-pb) + var(--o_menubar-top-pbt-offset));
		--o_menubar-top-mi: var(--o_menubar-topitem-margin-inline, var(--o-size-1));
		--o_menubar-top-mb: var(--o_menubar-topitem-margin-block, var(--o-size-1));

		--o_menubar-sub-bti: var(--o_menubar-subitem-initial-border-thickness, 0px);
		--o_menubar-sub-bt: var(--o_menubar-subitem-border-thickness, var(--o-border-size-2));
		--o_menubar-sub-br: var(--o_menubar-subitem-border-radius, 0);
		--o_menubar-sub-pi: var(--o_menubar-subitem-padding-inline, var(--o-size-2));
		--o_menubar-sub-pb: var(--o_menubar-subitem-padding-block, var(--o-size-2));
		--o_menubar-sub-pl-offset: 0px;
		--o_menubar-sub-pl: calc(var(--o_menubar-sub-pi) + var(--o_menubar-sub-pl-offset));
		--o_menubar-sub-mi: var(--o_menubar-subitem-margin-inline, var(--o-size-1));
		--o_menubar-sub-mb: var(--o_menubar-subitem-margin-block, var(--o-size-1));

		/* Display properties */
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
		justify-content: flex-start;
		align-items: center;
		align-content: center;

		/* Spacing properties */
		margin-inline: var(--o_menubar-mi);
		margin-block: var(--o_menubar-mb);
		padding-inline: calc(var(--o_menubar-bti) + var(--o_menubar-pi));
		padding-block: calc(var(--o_menubar-bti) + var(--o_menubar-pb));

		gap: var(--o_menubar-gap, var(--o-size-fluid-1));

		/* Color properties */
		background-color: var(--o_menubar-bg, transparent);

		/* Border properties */
		border: var(--o_menubar-bti) solid var(--o_menubar-bc);
		border-radius: var(--o_menubar-border-radius, 0);

		/* Other properties */
		list-style: none;
	}

	.o-menubar-navigation .brxe-text-basic,
	.o-menubar-navigation .brxe-text {
		font-size: var(--o_menubar-global-font-size, var(--o-font-size-1));
	}

	.o-menubar-navigation li {
		margin: 0;
		padding: 0;
		border: 0 solid black;
		list-style: none;
	}

	:where(.o-menubar-navigation) > li {
		display: inline-block;
		position: relative;
	}

	:where(.o-menubar-navigation) > li li {
		display: block;
	}

	.o-menubar-navigation > li > [role='menuitem'] {
		display: inline-block;
		min-inline-size: max-content;
		margin-block: var(--o_menubar-top-mb);
		margin-inline: var(--o_menubar-top-mi);

		padding-block: var(--o_menubar-top-pb);
		padding-inline: var(--o_menubar-top-pi);
		padding-bottom: var(--o_menubar-top-pbt);

		background-color: var(--o_menubar-topitem-bg, var(--o_menubar-bg));

		border: 0 solid var(--o_menubar-top-bc);
		border-radius: var(--o_menubar-top-br);

		color: var(--o_main-link-color);
		font-size: var(--o_menubar-topitem-font-size, var(--o_menubar-global-font-size));
        text-decoration: none;
	}

	.o-menubar-navigation [role='menu'] [role='menuitem'],
	.o-menubar-navigation [role='menu'] [role='separator'] {
		display: block;
		min-inline-size: max-content;
		margin-block: var(--o_menubar-sub-mb);
		margin-inline: var(--o_menubar-sub-mi);

		padding-block: var(--o_menubar-sub-pb);
		padding-inline: var(--o_menubar-sub-pi);
		padding-left: var(--o_menubar-sub-pl);

		border: 0 solid var(--o_menubar-sub-bc);
		border-radius: var(--o_menubar-sub-br);

		font-size: var(--o_menubar-subitem-font-size, var(--o_menubar-global-font-size));
		color: var(--o_sub-link-color);
        text-decoration: none;
	}

	.o-menubar-navigation [role='menu'] [role='separator'] {
		padding: 0;
		padding-top: var(--o_menubar-separator-height, var(--o-border-size-2));
		margin-block: var(--o_menubar-separator-margin, var(--o-size-fluid-1));
		background-color: var(--o_menubar-separator-color, var(--o-surface-4));
	}

	.o-menubar-navigation [role='menu'] [role='menuitem'] {
		background-color: var(--o_menubar-subitem-bg, transparent);
	}

	.o-menubar-navigation [role='menu'] {
		/* Display properties */
		display: none;
		position: absolute;

		/* Layout properties */
		max-width: initial;
		width: max-content;
		margin: 0;
		padding-inline: var(--o_menubar-popup-pi);
		padding-block: var(--o_menubar-popup-pb);

		/* Color properties */
		background-color: var(--o_menubar-popup-bg);

		/* Border properties */
		border: var(--o_menubar-popup-bt) solid var(--o_menubar-popup-bc);
		border-radius: var(--o_menubar-popup-br);

		/* Other properties */
		box-shadow: var(--o_menubar-submenu-shadow, var(--o-shadow-4));
	}

	.o-menubar-navigation [role='group'] {
		margin: 0;
		padding: 0;
	}

	.o-menubar-navigation__top-link--expandable::after,
	.o-menubar-navigation__link--expandable::after {
		content: '';
		display: inline-block;
		border-top: var(--o_caret-top) solid transparent;
		border-left: var(--o_caret-top) solid transparent;
		border-bottom: var(--o_caret-top) solid currentcolor;
		border-right: var(--o_caret-top) solid currentcolor;
		height: 0.5em;
		margin-left: 0.75em;
		width: 0.5em;
		transform: translateX(-50%) translateY(-25%) rotate(45deg);
		transform-origin: center center;
		transition: transform 0.2s var(--o-ease-in-out-3);
	}
	.o-menubar-navigation__link--expandable::after {
		border-top: var(--o_caret-sub) solid transparent;
		border-left: var(--o_caret-sub) solid transparent;
		border-bottom: var(--o_caret-sub) solid currentcolor;
		border-right: var(--o_caret-sub) solid currentcolor;
		transform: translateX(-50%) translateY(-12.5%) rotate(-45deg);
	}

	.o-menubar-navigation__top-link--expandable[aria-expanded='true']::after {
		transform: translateX(-50%) translateY(0) rotate(-135deg);
	}
	.o-menubar-navigation__link--expandable[aria-expanded='true']::after {
		transform: translateX(-50%) translateY(-25%) rotate(45deg);
	}

	/* aria-current styling */

	.o-menubar-navigation > li > [role='menuitem'][aria-current],
	.o-menubar-navigation > li > [role='menuitem'].aria-current-path {
		padding-bottom: calc(var(--o_menubar-top-bti) + var(--o_menubar-top-pbt) - 2 * var(--o_menubar-top-bt));
		border-bottom: calc(2 * var(--o_menubar-top-bt)) solid var(--o_menubar-top-bc);
	}

	.o-menubar-navigation [role='menu'] [role='menuitem'].aria-current-path,
	.o-menubar-navigation [role='menu'] [role='menuitem'][aria-current] {
		padding-left: calc(var(--o_menubar-sub-bti) + var(--o_menubar-sub-pl) - 2 * var(--o_menubar-sub-bt));
		border-left: calc(2 * var(--o_menubar-sub-bt)) solid var(--o_menubar-sub-bc);
	}

	/* focus styling */

	.o-menubar-navigation.focus {
		padding-inline: calc(var(--o_menubar-bti) + var(--o_menubar-pi) - var(--o_menubar-bt));
		padding-block: calc(var(--o_menubar-bti) + var(--o_menubar-pb) - var(--o_menubar-bt));
		border-color: var(--o_menubar-bc);
		border-width: calc(var(--o_menubar-bti) + var(--o_menubar-bt));
		border-style: solid;
	}

	.o-menubar-navigation > li > [aria-expanded='true'],
	.o-menubar-navigation > li > [role='menuitem']:focus,
	.o-menubar-navigation > li > [role='menuitem']:hover {
		outline: none;
		color: var(--o_main-link-color-hover);
		background-color: var(--o_menubar-topitem-active-bg, transparent);
	}

	.o-menubar-navigation > li > [role='menuitem']:focus,
	.o-menubar-navigation > li > [role='menuitem']:hover {
		padding-inline: calc(var(--o_menubar-top-bti) + var(--o_menubar-top-pi) - var(--o_menubar-top-bt));
		padding-block: calc(var(--o_menubar-top-bti) + var(--o_menubar-top-pb) - var(--o_menubar-top-bt));
		padding-bottom: calc(var(--o_menubar-top-bti) + var(--o_menubar-top-pbt) - var(--o_menubar-top-bt));
		border: calc(var(--o_menubar-top-bti) + var(--o_menubar-top-bt)) solid var(--o_menubar-top-bc);
	}

	.o-menubar-navigation [role='menu'] [aria-expanded='true'],
	.o-menubar-navigation [role='menu'] [role='menuitem']:focus,
	.o-menubar-navigation [role='menu'] [role='menuitem']:hover {
		color: var(--o_sub-link-color-hover);
		background-color: var(--o_menubar-subitem-active-bg, transparent);
		outline: none;
	}

	.o-menubar-navigation [role='menu'] [role='menuitem']:focus,
	.o-menubar-navigation [role='menu'] [role='menuitem']:hover {
		padding-inline: calc(var(--o_menubar-sub-bti) + var(--o_menubar-sub-pi) - var(--o_menubar-sub-bt));
		padding-block: calc(var(--o_menubar-sub-bti) + var(--o_menubar-sub-pb) - var(--o_menubar-sub-bt));
		padding-left: calc(var(--o_menubar-sub-bti) + var(--o_menubar-sub-pl) - var(--o_menubar-sub-bt));
		border: calc(var(--o_menubar-sub-bti) + var(--o_menubar-sub-bt)) solid var(--o_menubar-sub-bc);
	}

	.o-menubar-navigation > li > [aria-expanded='true'].aria-current-path,
	.o-menubar-navigation > li > [role='menuitem'].aria-current-path:focus,
	.o-menubar-navigation > li > [role='menuitem'].aria-current-path:hover,
	.o-menubar-navigation > li > [role='menuitem'][aria-current]:focus,
	.o-menubar-navigation > li > [role='menuitem'][aria-current]:hover {
		padding-bottom: calc(var(--o_menubar-top-bti) + var(--o_menubar-top-pbt) - 2 * var(--o_menubar-top-bt));
		border-bottom: calc(2 * var(--o_menubar-top-bt)) solid var(--o_menubar-top-bc);
	}

	.o-menubar-navigation [role='menu'] [aria-expanded='true'].aria-current-path,
	.o-menubar-navigation [role='menu'] [role='menuitem'].aria-current-path:focus,
	.o-menubar-navigation [role='menu'] [role='menuitem'].aria-current-path:hover,
	.o-menubar-navigation [role='menu'] [role='menuitem'][aria-current]:focus,
	.o-menubar-navigation [role='menu'] [role='menuitem'][aria-current]:hover {
		padding-left: calc(var(--o_menubar-sub-bti) + var(--o_menubar-sub-pl) - 2 * var(--o_menubar-sub-bt));
		border-left: calc(2 * var(--o_menubar-sub-bt)) solid var(--o_menubar-sub-bc);
	}
</style>

<script>
	/*
	 *   This content is licensed according to the W3C Software License at
	 *   https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document
	 *
	 *   File:   menubar-navigation.js
	 *
	 *   Desc:   Creates a menubar of hierarchical set of links
	 */

	'use strict';

	class NavigationContentGenerator {
		constructor(siteURL, siteName) {
			this.siteName = siteName;
			this.siteURL = siteURL;
			this.fillerTextSentences = [];

			this.fillerTextSentences.push('The content on this page is associated with the <a href="$linkURL">$linkName</a> link for <a href="$siteURL">$siteName</a>.');
		}

		renderParagraph(linkURL, linkName) {
			var content = '';
			this.fillerTextSentences.forEach(
				(s) => (content += s.replace('$siteName', this.siteName).replace('$siteURL', this.siteURL).replace('$linkName', linkName).replace('$linkURL', linkURL))
			);
			return content;
		}
	}

	class MenubarNavigation {
		constructor(domNode) {
			var linkURL, linkTitle;

			this.domNode = domNode;

			this.menuitems = [];
			this.popups = [];
			this.menuitemGroups = {};
			this.menuOrientation = {};
			this.isPopup = {};
			this.isPopout = {};
			this.openPopups = false;

			this.firstChars = {}; // see Menubar init method
			this.firstMenuitem = {}; // see Menubar init method
			this.lastMenuitem = {}; // see Menubar init method

			this.initMenu(domNode, 0);

			domNode.addEventListener('focusin', this.onMenubarFocusin.bind(this));
			domNode.addEventListener('focusout', this.onMenubarFocusout.bind(this));

			window.addEventListener('pointerdown', this.onBackgroundPointerdown.bind(this), true);

			domNode.querySelector('[role=menuitem]').tabIndex = 0;

			// Initial content for page
			if (location.href.split('#').length > 1) {
				linkURL = location.href;
				linkTitle = getLinkNameFromURL(location.href);
			} else {
				linkURL = location.href + '#home';
				linkTitle = 'Home';
			}

			this.contentGenerator = new NavigationContentGenerator('#home', 'Your Awesome WebSite');
			this.updateContent(linkURL, linkTitle, false);

			function getLinkNameFromURL(url) {
				function capitalize(str) {
					return str.charAt(0).toUpperCase() + str.slice(1);
				}

				var name = url.split('#')[1];
				if (typeof name === 'string') {
					name = name.split('-').map(capitalize).join(' ');
				} else {
					name = 'Home';
				}
				return name;
			}
		}

		getParentMenuitem(menuitem) {
			var node = menuitem.parentNode;
			if (node) {
				node = node.parentNode;
				if (node) {
					node = node.previousElementSibling;
					if (node) {
						if (node.getAttribute('role') === 'menuitem') {
							return node;
						}
					}
				}
			}
			return false;
		}

		updateContent(linkURL, linkName, moveFocus) {
			var h1Node, paraNodes, pathNode;

			if (typeof moveFocus !== 'boolean') {
				moveFocus = true;
			}

			// Update content area
			h1Node = document.querySelector('.page .main h1');
			if (h1Node) {
				h1Node.textContent = linkName;
				h1Node.tabIndex = -1;
				if (moveFocus) {
					h1Node.focus();
				}
			}
			paraNodes = document.querySelectorAll('.page .main p');
			paraNodes.forEach((p) => (p.innerHTML = this.contentGenerator.renderParagraph(linkURL, linkName)));

			// Update aria-current
			this.menuitems.forEach((item) => {
				item.removeAttribute('aria-current');
				item.classList.remove('aria-current-path');
				item.title = '';
			});

			this.menuitems.forEach((item) => {
				if (item.href === linkURL) {
					item.setAttribute('aria-current', 'page');
					pathNode = this.getParentMenuitem(item);
					while (pathNode) {
						pathNode.classList.add('aria-current-path');
						pathNode.title = 'Contains current page link';
						pathNode = this.getParentMenuitem(pathNode);
					}
				}
			});
		}

		getMenuitems(domNode, depth) {
			var nodes = [];

			var initMenu = this.initMenu.bind(this);
			var popups = this.popups;

			function findMenuitems(node) {
				var role, flag;

				while (node) {
					flag = true;
					role = node.getAttribute('role');

					if (role) {
						role = role.trim().toLowerCase();
					}

					switch (role) {
						case 'menu':
							node.tabIndex = -1;
							initMenu(node, depth + 1);
							flag = false;
							break;

						case 'menuitem':
							if (node.getAttribute('aria-haspopup') === 'true') {
								popups.push(node);
							}
							nodes.push(node);
							break;

						default:
							break;
					}

					if (flag && node.firstElementChild && node.firstElementChild.tagName !== 'svg') {
						findMenuitems(node.firstElementChild);
					}
					node = node.nextElementSibling;
				}
			}
			findMenuitems(domNode.firstElementChild);
			return nodes;
		}

		initMenu(menu, depth) {
			var menuitems, menuitem, role;

			var menuId = this.getMenuId(menu);

			menuitems = this.getMenuitems(menu, depth);
			this.menuOrientation[menuId] = this.getMenuOrientation(menu);

			this.isPopup[menuId] = menu.getAttribute('role') === 'menu' && depth === 1;
			this.isPopout[menuId] = menu.getAttribute('role') === 'menu' && depth > 1;

			this.menuitemGroups[menuId] = [];
			this.firstChars[menuId] = [];
			this.firstMenuitem[menuId] = null;
			this.lastMenuitem[menuId] = null;

			for (var i = 0; i < menuitems.length; i++) {
				menuitem = menuitems[i];
				role = menuitem.getAttribute('role');

				if (role.indexOf('menuitem') < 0) {
					continue;
				}

				menuitem.tabIndex = -1;
				this.menuitems.push(menuitem);
				this.menuitemGroups[menuId].push(menuitem);
				this.firstChars[menuId].push(menuitem.textContent.trim().toLowerCase()[0]);

				menuitem.addEventListener('keydown', this.onKeydown.bind(this));
				menuitem.addEventListener('click', this.onMenuitemClick.bind(this), {
					capture: true,
				});

				menuitem.addEventListener('pointerover', this.onMenuitemPointerover.bind(this));

				if (!this.firstMenuitem[menuId]) {
					if (this.hasPopup(menuitem)) {
						menuitem.tabIndex = 0;
					}
					this.firstMenuitem[menuId] = menuitem;
				}
				this.lastMenuitem[menuId] = menuitem;
			}
		}

		setFocusToMenuitem(menuId, newMenuitem) {
			this.closePopupAll(newMenuitem);

			if (this.menuitemGroups[menuId]) {
				this.menuitemGroups[menuId].forEach(function (item) {
					if (item === newMenuitem) {
						item.tabIndex = 0;
						newMenuitem.focus();
					} else {
						item.tabIndex = -1;
					}
				});
			}
		}

		setFocusToFirstMenuitem(menuId) {
			this.setFocusToMenuitem(menuId, this.firstMenuitem[menuId]);
		}

		setFocusToLastMenuitem(menuId) {
			this.setFocusToMenuitem(menuId, this.lastMenuitem[menuId]);
		}

		setFocusToPreviousMenuitem(menuId, currentMenuitem) {
			var newMenuitem, index;

			if (currentMenuitem === this.firstMenuitem[menuId]) {
				newMenuitem = this.lastMenuitem[menuId];
			} else {
				index = this.menuitemGroups[menuId].indexOf(currentMenuitem);
				newMenuitem = this.menuitemGroups[menuId][index - 1];
			}

			this.setFocusToMenuitem(menuId, newMenuitem);

			return newMenuitem;
		}

		setFocusToNextMenuitem(menuId, currentMenuitem) {
			var newMenuitem, index;

			if (currentMenuitem === this.lastMenuitem[menuId]) {
				newMenuitem = this.firstMenuitem[menuId];
			} else {
				index = this.menuitemGroups[menuId].indexOf(currentMenuitem);
				newMenuitem = this.menuitemGroups[menuId][index + 1];
			}
			this.setFocusToMenuitem(menuId, newMenuitem);

			return newMenuitem;
		}

		setFocusByFirstCharacter(menuId, currentMenuitem, char) {
			var start, index;

			char = char.toLowerCase();

			// Get start index for search based on position of currentItem
			start = this.menuitemGroups[menuId].indexOf(currentMenuitem) + 1;
			if (start >= this.menuitemGroups[menuId].length) {
				start = 0;
			}

			// Check remaining slots in the menu
			index = this.getIndexFirstChars(menuId, start, char);

			// If not found in remaining slots, check from beginning
			if (index === -1) {
				index = this.getIndexFirstChars(menuId, 0, char);
			}

			// If match was found...
			if (index > -1) {
				this.setFocusToMenuitem(menuId, this.menuitemGroups[menuId][index]);
			}
		}

		// Utilities

		getIndexFirstChars(menuId, startIndex, char) {
			for (var i = startIndex; i < this.firstChars[menuId].length; i++) {
				if (char === this.firstChars[menuId][i]) {
					return i;
				}
			}
			return -1;
		}

		isPrintableCharacter(str) {
			return str.length === 1 && str.match(/\S/);
		}

		getIdFromAriaLabel(node) {
			var id = node.getAttribute('aria-label');
			if (id) {
				id = id.trim().toLowerCase().replace(' ', '-').replace('/', '-');
			}
			return id;
		}

		getMenuOrientation(node) {
			var orientation = node.getAttribute('aria-orientation');

			if (!orientation) {
				var role = node.getAttribute('role');

				switch (role) {
					case 'menubar':
						orientation = 'horizontal';
						break;

					case 'menu':
						orientation = 'vertical';
						break;

					default:
						break;
				}
			}

			return orientation;
		}

		getMenuId(node) {
			var id = false;
			var role = node.getAttribute('role');

			while (node && role !== 'menu' && role !== 'menubar') {
				node = node.parentNode;
				if (node) {
					role = node.getAttribute('role');
				}
			}

			if (node) {
				id = role + '-' + this.getIdFromAriaLabel(node);
			}

			return id;
		}

		getMenu(menuitem) {
			var menu = menuitem;
			var role = menuitem.getAttribute('role');

			while (menu && role !== 'menu' && role !== 'menubar') {
				menu = menu.parentNode;
				if (menu) {
					role = menu.getAttribute('role');
				}
			}

			return menu;
		}

		// Popup menu methods

		isAnyPopupOpen() {
			for (var i = 0; i < this.popups.length; i++) {
				if (this.popups[i].getAttribute('aria-expanded') === 'true') {
					return true;
				}
			}
			return false;
		}

		setMenubarDataExpanded(value) {
			this.domNode.setAttribute('data-menubar-item-expanded', value);
		}

		isMenubarDataExpandedTrue() {
			return this.domNode.getAttribute('data-menubar-item-expanded') === 'true';
		}

		openPopup(menuId, menuitem) {
			// set aria-expanded attribute
			var popupMenu = menuitem.nextElementSibling;

			if (popupMenu) {
				var rect = menuitem.getBoundingClientRect();

				// Set CSS properties
				if (this.isPopup[menuId]) {
					popupMenu.parentNode.style.position = 'relative';
					popupMenu.style.display = 'block';
					popupMenu.style.position = 'absolute';
					popupMenu.style.left = rect.width + 10 + 'px';
					popupMenu.style.top = '0px';
					popupMenu.style.zIndex = 100;
				} else {
					popupMenu.style.display = 'block';
					popupMenu.style.position = 'absolute';
					popupMenu.style.left = '0px';
					popupMenu.style.top = rect.height + 8 + 'px';
					popupMenu.style.zIndex = 100;
				}

				menuitem.setAttribute('aria-expanded', 'true');
				this.setMenubarDataExpanded('true');
				return this.getMenuId(popupMenu);
			}

			return false;
		}

		closePopout(menuitem) {
			var menu,
				menuId = this.getMenuId(menuitem),
				cmi = menuitem;

			while (this.isPopup[menuId] || this.isPopout[menuId]) {
				menu = this.getMenu(cmi);
				cmi = menu.previousElementSibling;
				menuId = this.getMenuId(cmi);
				menu.style.display = 'none';
			}
			cmi.focus();
			return cmi;
		}

		closePopup(menuitem) {
			var menu,
				menuId = this.getMenuId(menuitem),
				cmi = menuitem;

			if (this.isMenubar(menuId)) {
				if (this.isOpen(menuitem)) {
					menuitem.setAttribute('aria-expanded', 'false');
					menuitem.nextElementSibling.style.display = 'none';
				}
			} else {
				menu = this.getMenu(menuitem);
				cmi = menu.previousElementSibling;
				cmi.setAttribute('aria-expanded', 'false');
				cmi.focus();
				menu.style.display = 'none';
			}

			return cmi;
		}

		doesNotContain(popup, menuitem) {
			if (menuitem) {
				return !popup.nextElementSibling.contains(menuitem);
			}
			return true;
		}

		closePopupAll(menuitem) {
			if (typeof menuitem !== 'object') {
				menuitem = false;
			}
			for (var i = 0; i < this.popups.length; i++) {
				var popup = this.popups[i];
				if (this.doesNotContain(popup, menuitem) && this.isOpen(popup)) {
					var cmi = popup.nextElementSibling;
					if (cmi) {
						popup.setAttribute('aria-expanded', 'false');
						cmi.style.display = 'none';
					}
				}
			}
		}

		hasPopup(menuitem) {
			return menuitem.getAttribute('aria-haspopup') === 'true';
		}

		isOpen(menuitem) {
			return menuitem.getAttribute('aria-expanded') === 'true';
		}

		isMenubar(menuId) {
			return !this.isPopup[menuId] && !this.isPopout[menuId];
		}

		isMenuHorizontal(menuitem) {
			return this.menuOrientation[menuitem] === 'horizontal';
		}

		hasFocus() {
			return this.domNode.classList.contains('focus');
		}

		// Menu event handlers

		onMenubarFocusin() {
			// if the menubar or any of its menus has focus, add styling hook for hover
			this.domNode.classList.add('focus');
		}

		onMenubarFocusout() {
			// remove styling hook for hover on menubar item
			this.domNode.classList.remove('focus');
		}

		onKeydown(event) {
			var tgt = event.currentTarget,
				key = event.key,
				flag = false,
				menuId = this.getMenuId(tgt),
				id,
				popupMenuId,
				mi;

			switch (key) {
				case ' ':
				case 'Enter':
					if (this.hasPopup(tgt)) {
						this.openPopups = true;
						popupMenuId = this.openPopup(menuId, tgt);
						this.setFocusToFirstMenuitem(popupMenuId);
					} else {
						if (tgt.href !== '#') {
							this.closePopupAll();
							this.updateContent(tgt.href, tgt.textContent.trim());
							this.setMenubarDataExpanded('false');
						}
					}
					flag = true;
					break;

				case 'Esc':
				case 'Escape':
					this.openPopups = false;
					mi = this.closePopup(tgt);
					id = this.getMenuId(mi);
					this.setMenubarDataExpanded('false');
					flag = true;
					break;

				case 'Up':
				case 'ArrowUp':
					if (this.isMenuHorizontal(menuId)) {
						if (this.hasPopup(tgt)) {
							this.openPopups = true;
							popupMenuId = this.openPopup(menuId, tgt);
							this.setFocusToLastMenuitem(popupMenuId);
						}
					} else {
						this.setFocusToPreviousMenuitem(menuId, tgt);
					}
					flag = true;
					break;

				case 'ArrowDown':
				case 'Down':
					if (this.isMenuHorizontal(menuId)) {
						if (this.hasPopup(tgt)) {
							this.openPopups = true;
							popupMenuId = this.openPopup(menuId, tgt);
							this.setFocusToFirstMenuitem(popupMenuId);
						}
					} else {
						this.setFocusToNextMenuitem(menuId, tgt);
					}
					flag = true;
					break;

				case 'Left':
				case 'ArrowLeft':
					if (this.isMenuHorizontal(menuId)) {
						mi = this.setFocusToPreviousMenuitem(menuId, tgt);
						if (this.isAnyPopupOpen() || this.isMenubarDataExpandedTrue()) {
							this.openPopup(menuId, mi);
						}
					} else {
						if (this.isPopout[menuId]) {
							mi = this.closePopup(tgt);
							id = this.getMenuId(mi);
							mi = this.setFocusToMenuitem(id, mi);
						} else {
							mi = this.closePopup(tgt);
							id = this.getMenuId(mi);
							mi = this.setFocusToPreviousMenuitem(id, mi);
							this.openPopup(id, mi);
						}
					}
					flag = true;
					break;

				case 'Right':
				case 'ArrowRight':
					if (this.isMenuHorizontal(menuId)) {
						mi = this.setFocusToNextMenuitem(menuId, tgt);
						if (this.isAnyPopupOpen() || this.isMenubarDataExpandedTrue()) {
							this.openPopup(menuId, mi);
						}
					} else {
						if (this.hasPopup(tgt)) {
							popupMenuId = this.openPopup(menuId, tgt);
							this.setFocusToFirstMenuitem(popupMenuId);
						} else {
							mi = this.closePopout(tgt);
							id = this.getMenuId(mi);
							mi = this.setFocusToNextMenuitem(id, mi);
							this.openPopup(id, mi);
						}
					}
					flag = true;
					break;

				case 'Home':
				case 'PageUp':
					this.setFocusToFirstMenuitem(menuId, tgt);
					flag = true;
					break;

				case 'End':
				case 'PageDown':
					this.setFocusToLastMenuitem(menuId, tgt);
					flag = true;
					break;

				case 'Tab':
					this.openPopups = false;
					this.setMenubarDataExpanded('false');
					this.closePopup(tgt);
					break;

				default:
					if (this.isPrintableCharacter(key)) {
						this.setFocusByFirstCharacter(menuId, tgt, key);
						flag = true;
					}
					break;
			}

			if (flag) {
				event.stopPropagation();
				event.preventDefault();
			}
		}

		onMenuitemClick(event) {
			var tgt = event.currentTarget;
			var menuId = this.getMenuId(tgt);

			if (this.hasPopup(tgt)) {
				if (this.isOpen(tgt)) {
					this.closePopup(tgt);
				} else {
					this.closePopupAll(tgt);
					this.openPopup(menuId, tgt);
				}
			} else {
				this.updateContent(tgt.href, tgt.textContent.trim());
				this.closePopupAll();
			}
			event.stopPropagation();
			event.preventDefault();
		}

		onMenuitemPointerover(event) {
			var tgt = event.currentTarget;
			var menuId = this.getMenuId(tgt);

			if (this.hasFocus()) {
				this.setFocusToMenuitem(menuId, tgt);
			}

			if (this.isAnyPopupOpen() || this.hasFocus()) {
				this.closePopupAll(tgt);
				if (this.hasPopup(tgt)) {
					this.openPopup(menuId, tgt);
				}
			}
		}

		onBackgroundPointerdown(event) {
			if (!this.domNode.contains(event.target)) {
				this.closePopupAll();
			}
		}
	}

	// Initialize menubar editor

	window.addEventListener('load', function () {
		var menubarNavs = document.querySelectorAll('.o-menubar-navigation');
		for (var i = 0; i < menubarNavs.length; i++) {
			new MenubarNavigation(menubarNavs[i]);
		}
	});
</script>
